import os
from typing import List, Dict, Any

from langchain.schema import HumanMessage, AIMessage, SystemMessage
from langchain_google_genai import ChatGoogleGenerativeAI
from .vector_service_new import vector_service


class ChatService:
    def __init__(self):
        # Load Google API Key from environment
        api_key = os.getenv('GOOGLE_API_KEY')

        if api_key:
            # Initialize Gemini model (Google Generative AI)
            self.llm = ChatGoogleGenerativeAI(
                model="gemini-1.5-flash-002",  
                temperature=0.5, 
                google_api_key=api_key
            )
            self.provider = "google"
        else:
            # Development mode with mock responses
            self.llm = None
            self.provider = "mock"

    def get_system_prompt(self, context: str = "") -> str:
        """
        Return the system prompt defining AI behavior and tone.
        Optionally includes relevant context from documents.
        """
        base_prompt = """
‡§§‡§™‡§æ‡§à‡§Ç **‡§ï‡•É‡§∑‡§ø‡§∏‡§æ‡§•‡•Ä** ‡§π‡•ã ‚Äî ‡§è‡§ï ‡§≠‡§∞‡§™‡§∞‡•ç‡§¶‡•ã ‡§°‡§ø‡§ú‡§ø‡§ü‡§≤ ‡§ï‡•É‡§∑‡§ø ‡§∏‡§≤‡•ç‡§≤‡§æ‡§π‡§ï‡§æ‡§∞, ‡§ú‡§∏‡§≤‡•á ‡§®‡•á‡§™‡§æ‡§≤‡•Ä ‡§ï‡§ø‡§∏‡§æ‡§®‡§π‡§∞‡•Ç (‡§ú‡§∏‡•ç‡§§‡•à ‡§∞‡§Æ‡•á‡•á‡§∂) ‡§≤‡§æ‡§à ‡§Ü‡§µ‡§æ‡§ú‡§Æ‡§æ ‡§Ü‡§ß‡§æ‡§∞‡§ø‡§§ ‡§∏‡§≤‡•ç‡§≤‡§æ‡§π ‡§¶‡§ø‡§®‡•ç‡§õ‡•§ ‡§ß‡•á‡§∞‡•à ‡§ï‡§ø‡§∏‡§æ‡§®‡§π‡§∞‡•Ç ‡§™‡§¢‡•ç‡§® ‡§∏‡§ï‡•ç‡§¶‡•à‡§®‡§®‡•ç, ‡§§‡•ç‡§Ø‡§∏‡•à‡§≤‡•á ‡§§‡§™‡§æ‡§à‡§Ç‡§ï‡•ã ‡§â‡§§‡•ç‡§§‡§∞‡§π‡§∞‡•Ç **‡§∏‡§∞‡§≤, ‡§∏‡•ç‡§™‡§∑‡•ç‡§ü ‡§®‡•á‡§™‡§æ‡§≤‡•Ä‡§Æ‡§æ Markdown ‡§´‡§æ‡§∞‡§Æ‡•ç‡§Ø‡§æ‡§ü‡§Æ‡§æ** ‡§π‡•Å‡§®‡•Å‡§™‡§∞‡•ç‡§õ ‡§ú‡•Å‡§® ‡§Ü‡§µ‡§æ‡§ú‡§Æ‡§æ ‡§∏‡§ú‡§ø‡§≤‡•à ‡§¨‡§ú‡•ç‡§®‡§∏‡§ï‡•ç‡§õ‡•§

### üéØ ‡§â‡§¶‡•ç‡§¶‡•á‡§∂‡•ç‡§Ø:
- ‡§Ö‡§∏‡•Å‡§∞‡§ï‡•ç‡§∑‡§ø‡§§ ‡§Ö‡§≠‡•ç‡§Ø‡§æ‡§∏ ‡§∞‡•ã‡§ï‡•ç‡§®‡•á ‡§∏‡•Å‡§∞‡§ï‡•ç‡§∑‡§ø‡§§ ‡§∞ ‡§∏‡§π‡•Ä ‡§∏‡§≤‡•ç‡§≤‡§æ‡§π ‡§¶‡§ø‡§®‡•á
- ‡§∞‡§æ‡§∏‡§æ‡§Ø‡§®‡§ø‡§ï ‡§™‡•ç‡§∞‡§Ø‡•ã‡§ó, ‡§Æ‡§≤, ‡§¨‡§ø‡§â ‡§∞ ‡§¨‡§æ‡§≤‡•Ä ‡§∏‡§Ç‡§∞‡§ï‡•ç‡§∑‡§£ ‡§∏‡§Æ‡•ç‡§¨‡§®‡•ç‡§ß‡•Ä ‡§†‡•ã‡§∏ ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä ‡§¶‡§ø‡§®‡•á
- ‡§Æ‡•å‡§∏‡§Æ ‡§Ö‡§®‡•Å‡§∏‡§æ‡§∞‡§ï‡•ã ‡§ï‡•É‡§∑‡§ø ‡§ï‡§æ‡§∞‡•ç‡§Ø‡§Æ‡§æ ‡§∏‡§π‡§æ‡§Ø‡§§‡§æ ‡§ó‡§∞‡•ç‡§®‡•á
- ‡§ï‡§ø‡§∏‡§æ‡§®‡§™‡•ç‡§∞‡§§‡§ø ‡§∏‡§π‡§æ‡§®‡•Å‡§≠‡•Ç‡§§‡§ø ‡§∞‡§æ‡§ñ‡•ç‡§®‡•á, ‡§µ‡§ø‡§∂‡•ç‡§µ‡§æ‡§∏ ‡§¶‡§ø‡§≤‡§æ‡§â‡§®‡•á

### üß† ‡§µ‡•ç‡§Ø‡§µ‡§π‡§æ‡§∞ ‡§®‡§ø‡§Ø‡§Æ:
- ‡§Ø‡§¶‡§ø ‡§ï‡§ø‡§∏‡§æ‡§®‡§ï‡•ã ‡§∏‡•ã‡§ß‡§æ‡§à ‡§Ö‡§∏‡•ç‡§™‡§∑‡•ç‡§ü ‡§õ ‡§≠‡§®‡•á **‡§∏‡§ø‡§ß‡•à ‡§â‡§§‡•ç‡§§‡§∞ ‡§®‡§¶‡§ø‡§à** ‡§™‡§π‡§ø‡§≤‡•á ‡§™‡•ç‡§∞‡§∏‡•ç‡§ü ‡§™‡•Å‡§õ‡•ç‡§®‡•Å‡§π‡•ã‡§∏‡•ç (‡§â‡§¶‡§æ‡§π‡§∞‡§£: "**‡§ï‡•É‡§™‡§Ø‡§æ ‡§§‡§™‡§æ‡§à‡§Å‡§ï‡•ã ‡§¨‡§æ‡§≤‡•Ä‡§Æ‡§æ ‡§ï‡•á ‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ ‡§Ü‡§á‡§∞‡§π‡•á‡§ï‡•ã ‡§õ ‡§∏‡•ç‡§™‡§∑‡•ç‡§ü ‡§™‡§æ‡§∞‡•ç‡§® ‡§∏‡§ï‡•ç‡§®‡•Å‡§π‡•Å‡§®‡•ç‡§õ?**")
- ‡§Ø‡§¶‡§ø ‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ ‡§µ‡§æ ‡§∞‡•ã‡§ó‡§ï‡•ã ‡§≤‡§ï‡•ç‡§∑‡§£‡§π‡§∞‡•Ç ‡§õ ‡§≠‡§®‡•á **‡§§‡§™‡§æ‡§à‡§Å‡§≤‡•á ‡§®‡§ø‡§¶‡§æ‡§® ‡§ó‡§∞‡•ç‡§®‡•á ‡§™‡•ç‡§∞‡§Ø‡§æ‡§∏ ‡§ó‡§∞‡•ç‡§®‡•Å‡§π‡•ã‡§∏‡•ç** ("‡§ï‡•á ‡§¨‡§æ‡§≤‡•Ä‡§ï‡•ã ‡§™‡§æ‡§§ ‡§™‡§π‡•á‡§Å‡§≤‡•ã ‡§π‡•Å‡§Å‡§¶‡•à‡§õ?" ‡§Ü‡§¶‡§ø)

### ‚úÖ ‡§ó‡§∞‡•ç‡§®‡•Å‡§π‡•ã‡§∏‡•ç:
- **‡§∏‡§∞‡§≤, ‡§∏‡•ç‡§™‡§∑‡•ç‡§ü ‡§®‡•á‡§™‡§æ‡§≤‡•Ä** ‡§¨‡•ã‡§≤‡•ç‡§®‡•Å‡§π‡•ã‡§∏‡•ç
- Markdown ‡§™‡•ç‡§∞‡§Ø‡•ã‡§ó ‡§ó‡§∞‡•ç‡§®‡•Å‡§π‡•ã‡§∏‡•ç:
  - `### ‡§∏‡§≤‡•ç‡§≤‡§æ‡§π` ‡§µ‡§æ `### ‡§∏‡§æ‡§µ‡§ß‡§æ‡§®‡•Ä` ‡§ú‡§∏‡•ç‡§§‡§æ ‡§∂‡•Ä‡§∞‡•ç‡§∑‡§ï‡§π‡§∞‡•Ç
  - **Bold** ‡§™‡•ç‡§∞‡§Ø‡•ã‡§ó ‡§ó‡§∞‡•á‡§∞ ‡§Æ‡•Å‡§ñ‡•ç‡§Ø ‡§ï‡•Å‡§∞‡§æ‡§Æ‡§æ ‡§ú‡•ã‡§° ‡§¶‡§ø‡§®‡•Å‡§π‡•ã‡§∏‡•ç
  - ‡§≤‡§æ‡§á‡§® ‡§¨‡•ç‡§∞‡•á‡§ï ‡§∞‡§æ‡§ñ‡•ç‡§®‡•Å‡§π‡•ã‡§∏‡•ç ‡§Ü‡§µ‡§æ‡§ú‡§Æ‡§æ ‡§∞‡§æ‡§Æ‡•ç‡§∞‡•ã‡§∏‡§Å‡§ó ‡§™‡§¢‡§ø‡§®‡§ï‡•ã ‡§≤‡§æ‡§ó‡§ø
- ‡§â‡§§‡•ç‡§§‡§∞ **‡•ß‡•¶‡•¶ ‡§∂‡§¨‡•ç‡§¶‡§≠‡§®‡•ç‡§¶‡§æ ‡§ï‡§Æ** ‡§∞‡§æ‡§ñ‡•ç‡§®‡•Å‡§π‡•ã‡§∏‡•ç
- ‡§∏‡§Æ‡•ç‡§≠‡§æ‡§µ‡§ø‡§§ ‡§Ö‡§∏‡•Å‡§∞‡§ï‡•ç‡§∑‡§ø‡§§ ‡§Ö‡§≠‡•ç‡§Ø‡§æ‡§∏‡§≤‡§æ‡§à **‡§®‡§∞‡§Æ ‡§§‡§∞‡§ø‡§ï‡§æ‡§≤‡•á ‡§ö‡•á‡§§‡§æ‡§µ‡§®‡•Ä ‡§¶‡§ø‡§®‡•Å‡§π‡•ã‡§∏‡•ç**
- ‡§ï‡§ø‡§∏‡§æ‡§®‡§≤‡§æ‡§à ‡§∏‡§ß‡•à‡§Ç ‡§∏‡•ã‡§ß‡•ç‡§® ‡§™‡•ç‡§∞‡•ã‡§§‡•ç‡§∏‡§æ‡§π‡§® ‡§ó‡§∞‡•ç‡§®‡•Å‡§π‡•ã‡§∏‡•ç

### ‚ùå ‡§®‡§ó‡§∞‡•ç‡§®‡•Å‡§π‡•ã‡§∏‡•ç:
- ‡§ï‡§†‡§ø‡§® ‡§™‡•ç‡§∞‡§æ‡§µ‡§ø‡§ß‡§ø‡§ï ‡§∂‡§¨‡•ç‡§¶ ‡§®‡§ö‡§≤‡§æ‡§â‡§®‡•Å‡§π‡•ã‡§∏‡•ç
- ‡§ó‡§≤‡§§/‡§Ö‡§®‡§ø‡§∂‡•ç‡§ö‡§ø‡§§ ‡§∞‡§∏‡§æ‡§Ø‡§®‡§ï‡•ã ‡§∏‡§≤‡•ç‡§≤‡§æ‡§π ‡§®‡§¶‡§ø‡§®‡•Å‡§π‡•ã‡§∏‡•ç
- HTML, ‡§ï‡•ã‡§°, ‡§≤‡§ø‡§Ç‡§ï ‡§µ‡§æ emoji ‡§™‡•ç‡§∞‡§Ø‡•ã‡§ó ‡§®‡§ó‡§∞‡•ç‡§®‡•Å‡§π‡•ã‡§∏‡•ç
- ‡§µ‡§ø‡§ú‡•ç‡§û‡§æ‡§™‡§®‡§ú‡§∏‡•ç‡§§‡•ã ‡§ï‡•Å‡§∞‡§æ ‡§®‡§ó‡§∞‡•ç‡§®‡•Å‡§π‡•ã‡§∏‡•ç

---

**‡§§‡§™‡§æ‡§à‡§Ç ‡§ó‡§´ ‡§ó‡§∞‡•ç‡§®‡•á LLM ‡§π‡•ã‡§á‡§®, ‡§§‡§™‡§æ‡§à‡§Ç ‡§®‡§ø‡§∞‡•ç‡§£‡§Ø‡§Æ‡§æ ‡§∏‡§π‡§Ø‡•ã‡§ó ‡§ó‡§∞‡•ç‡§®‡•á "‡§ï‡•É‡§∑‡§ø ‡§ó‡§æ‡§á‡§°" ‡§π‡•Å‡§®‡•Å‡§π‡•Å‡§®‡•ç‡§õ‡•§**

‡§§‡§™‡§æ‡§à‡§Ç‡§ï‡•ã ‡§∏‡§¨‡•à ‡§â‡§§‡•ç‡§§‡§∞‡§π‡§∞‡•Ç **Nepali Markdown** ‡§Æ‡§æ ‡§¶‡§ø‡§®‡•Å‡§π‡•ã‡§∏‡•ç‡•§ ‡§Ö‡§Ç‡§ó‡•ç‡§∞‡•á‡§ú‡•Ä ‡§™‡•ç‡§∞‡§Ø‡•ã‡§ó ‡§®‡§ó‡§∞‡•ç‡§®‡•Å‡§π‡•ã‡§∏‡•ç ‡§ú‡§¨‡§∏‡§Æ‡•ç‡§Æ ‡§Ö‡§§‡•ç‡§Ø‡§æ‡§µ‡§∂‡•ç‡§Ø‡§ï ‡§õ‡•à‡§®‡•§
"""

        
        if context:
            base_prompt += f"""

### üìö Relevant Information from Research Documents:
{context}

Use this information to provide accurate, evidence-based guidance to the farmer. Always prioritize safety and cite the source when using specific information."""
        
        return base_prompt

    def get_chat_response(self, message: str, chat_history: List[Dict[str, Any]] = None) -> str:
        """
        Processes user message and returns a response from the AI assistant.
        Includes system prompt, chat history, and relevant document context.
        """
        try:
            if self.provider == "google" and self.llm:
                # Get relevant context from vector store
                context = ""
                try:
                    context = vector_service.get_relevant_context(message, max_docs=3)
                except Exception as e:
                    print(f"Vector search error: {e}")
                    # Continue without context if vector search fails
                
                messages = []

                # Add system prompt with context
                messages.append(SystemMessage(content=self.get_system_prompt(context)))

                # Add last 10 messages from history for context
                if chat_history:
                    for msg in chat_history[-10:]:
                        if msg['role'] == 'user':
                            messages.append(HumanMessage(content=msg['message']))
                        elif msg['role'] == 'assistant':
                            messages.append(AIMessage(content=msg['message']))

                # Add current user message
                messages.append(HumanMessage(content=message))

                # Invoke the model with full message list
                response = self.llm.invoke(messages)
                return response.content

            else:
                # Fallback for local development
                return f"‡§Ø‡•ã '{message}' ‡§ï‡•ã ‡§≤‡§æ‡§ó‡§ø mock response ‡§π‡•ã‡•§ ‡§ï‡•É‡§™‡§Ø‡§æ .env ‡§´‡§æ‡§á‡§≤‡§Æ‡§æ GOOGLE_API_KEY ‡§∞‡§æ‡§ñ‡•á‡§∞ ‡§Ö‡§∏‡§≤‡•Ä ‡§â‡§§‡•ç‡§§‡§∞ ‡§™‡§æ‡§â‡§®‡•Å‡§π‡•ã‡§∏‡•ç‡•§"

        except Exception as e:
            return f"‡§Æ‡§æ‡§´ ‡§ó‡§∞‡•ç‡§®‡•Å‡§π‡•ã‡§∏‡•ç, ‡§§‡§™‡§æ‡§à‡§Ç‡§ï‡•ã ‡§∏‡§®‡•ç‡§¶‡•á‡§∂ ‡§™‡•ç‡§∞‡§ï‡•ç‡§∞‡§ø‡§Ø‡§æ‡§Æ‡§æ ‡§§‡•ç‡§∞‡•Å‡§ü‡§ø ‡§≠‡§Ø‡•ã‡•§ ‡§§‡•ç‡§∞‡•Å‡§ü‡§ø: {str(e)}"


chat_service = ChatService()
